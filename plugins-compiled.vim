call dein#add('Shougo/dein.vim', {"merged": 0})
call dein#add('haya14busa/dein-command.vim', {"merged": 0})
call dein#add('roxma/nvim-yarp', {"if": "! g:env#nvim && g:env#python", "merged": 0})
call dein#add('roxma/vim-hug-neovim-rpc', {"if": "! g:env#nvim && g:env#python", "merged": 0})
call dein#add('mbbill/fencview', {"merged": 0})
call dein#add('rhysd/try-colorscheme.vim', {"merged": 0})
call dein#add('NLKNguyen/papercolor-theme', {"merged": 0})
call dein#add('neoclide/coc.nvim', {"if": "executable('yarn')", "build": "yarn install --frozen-lockfile", "hook_add": "Include /plugins-conf/coc\n", "hook_source": "Include /plugins-conf/coc-source\n", "merged": 0})
call dein#add('github/copilot.vim', {"hook_add": "let g:copilot_filetypes = {\n\\ '*': v:true\n\\ }\n", "merged": 0})
call dein#add('tweekmonster/spellrotate.vim', {"hook_add": "nmap <silent> zn <Plug>(SpellRotateForward)\nnmap <silent> zp <Plug>(SpellRotateBackward)\nvmap <silent> zn <Plug>(SpellRotateForwardV)\nvmap <silent> zp <Plug>(SpellRotateBackwardV)\n", "merged": 0})
call dein#add('Shougo/context_filetype.vim', {"hook_add": "Include /plugins-conf/context_filetype", "merged": 0})
call dein#add('blindFS/vim-regionsyntax', {"hook_add": "let g:regionsyntax_map = {\n\\ 'markdown': [\n\\   {\n\\     'ft' : 'text',\n\\     'start' : '\\$',\n\\     'end' : '\\$'\n\\   },\n\\   {\n\\     'ft' : 'text',\n\\     'start' : '\\$\\$',\n\\     'end' : '\\$\\$'\n\\   },\n\\ ],\n\\}\n", "merged": 0})
call dein#add('salsifis/vim-transpose', {"on_cmd": ["Transpose", "TransposeWords", "TransposeTab", "TransposeCSV", "TransposeInteractive", "TransposeIndentToggle"], "merged": 0})
call dein#add('AndrewRadev/sideways.vim', {"hook_add": "nmap gh <Cmd>SidewaysLeft<CR>\nnmap gl <Cmd>SidewaysRight<CR>\nomap a, <Plug>SidewaysArgumentTextobjA\nxmap a, <Plug>SidewaysArgumentTextobjA\nomap i, <Plug>SidewaysArgumentTextobjI\nxmap i, <Plug>SidewaysArgumentTextobjI\nautocmd FileType vue let b:sideways_definitions = [\n  \\   {\n  \\     'start':                   '<\\k\\+\\_s\\+',\n  \\     'end':                     '\\s*/\\?>',\n  \\     'delimited_by_whitespace': 1,\n  \\     'brackets':                ['\"''', '\"'''],\n  \\   },\n  \\   {\n  \\     'start':     '\\k:\\s*',\n  \\     'end':       ';',\n  \\     'delimiter': '\\s',\n  \\     'brackets':  ['(''\"', ')''\"'],\n  \\   },\n  \\   {\n  \\     'start':     '{\\_s*',\n  \\     'end':       ';\\=\\_s*}',\n  \\     'delimiter': ';\\_s*',\n  \\     'brackets':  ['(''\"', ')''\"'],\n  \\   },\n  \\ ]\n", "merged": 0})
call dein#add('AndrewRadev/switch.vim', {"hook_post_source": "if exists('g:switch_builtins')\n  let g:switch_builtins.ruby_hash_style =\n    \\ {\n    \\   '\"\\(\\k\\+\\%([?!]\\)\\=\\)\"\\s*=>':   '''\\1'' =>',\n    \\   '''\\(\\k\\+\\%([?!]\\)\\=\\)''\\s*=>': '\\1:',\n    \\   '\\<\\(\\k\\+\\%([?!]\\)\\=\\):':       ':\\1 =>',\n    \\   ':\\(\\k\\+\\%([?!]\\)\\=\\)\\s*=>':    '\"\\1\" =>',\n    \\ }\n  let g:switch_builtins.ruby_string =\n    \\ {\n    \\   '\"\\(\\k\\+\\%([?!]\\)\\=\\)\"\\@>\\%(\\s*=>\\)\\@!':   '''\\1''',\n    \\   '''\\(\\k\\+\\%([?!]\\)\\=\\)''\\@>\\%(\\s*=>\\)\\@!': ':\\1',\n    \\   ':\\(\\k\\+\\%([?!]\\)\\=\\)\\@>\\%(\\s*=>\\)\\@!':    '\"\\1\"\\2',\n    \\ }\nendif\n", "merged": 0})
call dein#add('kana/vim-smartchr', {"on_event": "InsertCharPre", "hook_add": "autocmd FileType c,cpp,perl,php inoremap <buffer> <expr> -\n  \\ smartchr#one_of('-', '->', '--')\n", "merged": 0})
call dein#add('FooSoft/vim-argwrap', {"hook_add": "function! NoTailArgwrap()\n  let b:argwrap_tail_comma_braces = ''\n  ArgWrap\n  unlet b:argwrap_tail_comma_braces\nendfunction\n\nfunction! TailArgwrap(braces)\n  let b:argwrap_tail_comma_braces = a:braces\n  ArgWrap\n  unlet b:argwrap_tail_comma_braces\nendfunction\n\nfunction! Argwrap()\n  if &filetype == 'ruby'\n    call TailArgwrap('{[')\n  elseif &filetype == 'python'\n    call TailArgwrap('{[(')\n  else\n    ArgWrap\n  endif\nendfunction\n\nnmap <silent> <Leader>w <Cmd>call Argwrap()<CR>\nnmap <silent> <Leader>W <Cmd>call NoTailArgwrap()<CR>\nlet g:argwrap_tail_comma_braces = '{['\n", "merged": 0})
call dein#add('dhruvasagar/vim-table-mode', {"on_map": "<Leader><Leader>tm", "hook_add": "let g:table_mode_map_prefix = '<Leader><Leader>t'\n", "merged": 0})
call dein#add('junegunn/vim-easy-align', {"on_map": ["<Plug>(EasyAlign)", "<Plug>(LiveEasyAlign)"], "on_cmd": ["EasyAlign", "LiveEasyAlign"], "hook_add": "vmap <Leader>al <Plug>(LiveEasyAlign)", "merged": 0})
call dein#add('chiedo/vim-case-convert', {"on_cmd": ["CamelToHyphen", "CamelToSnake", "HyphenToCamel", "HyphenToSnake", "SnakeToCamel", "SnakeToHyphen", "CamelToHyphenAll", "CamelToSnakeAll", "HyphenToCamelAll", "HyphenToSnakeAll", "SnakeToCamelAll", "SnakeToHyphenAll"], "hook_post_add": "call AddCommand('case.CamelToHyphen', 'CamelToHyphen')\ncall AddCommand('case.CamelToSnake',  'CamelToSnake')\ncall AddCommand('case.HyphenToCamel', 'HyphenToCamel')\ncall AddCommand('case.HyphenToSnake', 'HyphenToSnake')\ncall AddCommand('case.SnakeToCamel',  'SnakeToCamel')\ncall AddCommand('case.SnakeToHyphen', 'SnakeToHyphen')\n", "merged": 0})
call dein#add('tpope/vim-abolish', {"merged": 0})
call dein#add('joonty/vdebug', {"on_cmd": ["VdebugEval", "VdebugOpt", "VdebugStart"], "merged": 0})
call dein#add('will133/vim-dirdiff', {"on_cmd": ["DirDiff", "DirDiffOpen", "DirDiffNext", "DirDiffPrev", "DirDiffUpdate", "DirDiffQuit"], "merged": 0})
call dein#add('AndrewRadev/linediff.vim', {"on_cmd": ["Linediff", "LinediffReset"], "merged": 0})
call dein#add('/home/raidou/.vim/plugins-local/ft-extend', {"merged": 0})
call dein#add('drmikehenry/vim-fixkey', {"merged": 0})
call dein#add('mhinz/vim-startify', {"hook_add": "set sessionoptions=curdir,folds,help,slash,tabpages,unix\nlet g:startify_session_dir = g:env#record_dir#sessions\nlet g:startify_session_autoload = 1\nlet g:startify_session_delete_buffers = 1\nlet g:startify_session_persistence = 1\nlet g:startify_custom_header = [\n  \\ 'Raidou vim',\n  \\ ]\nlet g:startify_bookmarks = [\n  \\ $MYVIMRC,\n  \\ $MY_PLUGINS,\n  \\ ]\nlet g:startify_list_order = [\n  \\ ['   Vimfile:'],\n  \\ 'bookmarks',\n  \\ ['   Sessions:'],\n  \\ 'sessions',\n  \\ ['   Last Recently Use:'],\n  \\ 'files',\n  \\ ]\nmap <Leader><Leader><Leader> <Cmd>Startify<CR>\n", "hook_post_source": "call AddCommand('session.save', 'SSave')\ncall AddCommand('session.load', 'SLoad')\ncall AddCommand('session.delete', 'SDelete')\ncall AddCommand('session.close', 'SClose')\n", "merged": 0})
call dein#add('kshenoy/vim-signature', {"hook_add": "let g:SignatureErrorIfNoAvailableMarks = 0", "merged": 0})
call dein#add('gioele/vim-autoswap', {"if": "!has(\"win32\")", "merged": 0})
call dein#add('tpope/vim-repeat', {"merged": 0})
call dein#add('andymass/vim-matchup', {"hook_add": "let g:matchup_matchparen_deferred = 1\n", "merged": 0})
call dein#add('luochen1990/rainbow', {"hook_add": "let g:rainbow_active = 0\n", "merged": 0})
call dein#add('AndrewRadev/splitjoin.vim', {"on_map": ["gS", "gJ"], "merged": 0})
call dein#add('thinca/vim-ref', {"on_cmd": "Ref", "on_map": "<Plug>(ref-keyword)", "hook_add": "let g:ref_phpmanual_path = expand('~/document/ref/php-chunked-xhtml/')\nmap <Leader>K <Plug>(ref-keyword)\n", "merged": 0})
call dein#add('matze/vim-move', {"on_map": ["<M-k>", "<M-j>"], "hook_add": "let g:move_key_modifier = 'M'\nlet g:move_auto_indent = 0\nmap <S-Up> <M-k>\nmap <S-Down> <M-j>\n", "merged": 0})
call dein#add('tpope/vim-characterize', {"on_map": "ga", "merged": 0})
call dein#add('liuchengxu/vim-which-key', {"on_cmd": ["WhichKey", "WhichKey!"], "hook_add": "nmap <silent> <Leader> <Cmd>WhichKey '<Leader>'<CR>\nvmap <silent> <Leader> :<C-U>WhichKeyVisual '<Leader>'<CR>\nnmap <silent> <Leader>kg <Cmd>WhichKey 'g'<CR>\nvmap <silent> <Leader>kg :<C-U>WhichKeyVisual 'g'<CR>\n", "merged": 0})
call dein#add('tweekmonster/braceless.vim', {"hook_add": "autocmd FileType python,haml,sass,slim,yaml,coffee BracelessEnable +indent\n", "merged": 0})
call dein#add('lambdalisue/readablefold.vim', {"merged": 0})
call dein#add('chrisbra/vim-diff-enhanced', {"if": "!has('patch-8.1.0360')", "merged": 0})
call dein#add('tpope/vim-unimpaired', {"merged": 0})
call dein#add('gelguy/wilder.nvim', {"if": "g:env#nvim", "hook_post_source": "call wilder#setup({\n\\ 'modes': [':', '/', '?'],\n\\ 'next_key': '<C-n>',\n\\ 'previous_key': '<C-p>',\n\\ 'accept_key': '<Down>',\n\\ 'reject_key': '<Up>',\n\\ })\ncall wilder#set_option('pipeline', [\n\\   wilder#branch(\n\\     wilder#cmdline_pipeline({\n\\       'fuzzy': 1,\n\\       'set_pcre2_pattern': has('nvim'),\n\\     }),\n\\     wilder#python_search_pipeline({\n\\       'pattern': 'fuzzy',\n\\     }),\n\\   ),\n\\ ])\nlet s:highlighters = [\n\\ wilder#pcre2_highlighter(),\n\\ wilder#basic_highlighter(),\n\\ ]\ncall wilder#set_option('renderer', wilder#renderer_mux({\n\\ ':': wilder#popupmenu_renderer({\n\\   'highlighter': s:highlighters,\n\\ }),\n\\ '/': wilder#wildmenu_renderer({\n\\   'highlighter': s:highlighters,\n\\ }),\n\\ }))\n", "merged": 0})
call dein#add('tyru/caw.vim', {"on_map": "gc", "depends": "context_filetype.vim", "merged": 0, "hook_add": "let g:caw_dollarpos_sp_left = '  '\nmap <c-_> gcc\nInclude /plugins-conf/caw\n"})
call dein#add('/home/raidou/.vim/plugins-local/ft-caw', {"merged": 0})
call dein#add('kkoomen/vim-doge', {"merged": 0})
call dein#add('airblade/vim-rooter', {"hook_add": "let g:rooter_patterns = [\n  \\ 'Gemfile',\n  \\ 'package.json',\n  \\ 'Cargo.yaml',\n  \\ 'pyproject.toml',\n  \\ 'composer.json',\n  \\ '.git/',\n  \\]\n", "merged": 0})
call dein#add('weirongxu/vim-gtfo', {"rev": "fix-powershell", "on_map": ["got", "goT", "gof", "goF"], "hook_add": "let g:gtfo#terminals = {\n  \\ 'mac': 'iterm',\n  \\ 'win': 'powershell -NoLogo -NoExit -Command'\n  \\ }\n", "merged": 0})
call dein#add('sgur/vim-editorconfig', {"merged": 0})
call dein#add('Chiel92/vim-autoformat', {"on_cmd": "Autoformat", "merged": 0})
call dein#add('sbdchd/neoformat', {"on_cmd": "Neoformat", "merged": 0})
call dein#add('majutsushi/tagbar', {"on_cmd": ["TagbarOpen", "TagbarClose", "TagbarToggle", "Tagbar", "TagbarOpenAutoClose", "TagbarTogglePause", "TagbarSetFoldlevel", "TagbarShowTag", "TagbarCurrentTag", "TagbarGetTypeConfig", "TagbarDebug", "TagbarDebugEnd"], "hook_add": "let g:tagbar_show_linenumbers = 1\nmap <Leader>tt <Cmd>TagbarToggle<CR>\nInclude /plugins-conf/tagbar\n", "hook_source": "Pkg npm install jsctags", "merged": 0})
call dein#add('liuchengxu/vista.vim', {"hook_add": "map <Leader>tv <Cmd>Vista coc<CR>\n", "merged": 0})
call dein#add('wesleyche/SrcExpl', {"on_cmd": ["SrcExpl", "SrcExplClose", "SrcExplToggle"], "merged": 0})
call dein#add('Lokaltog/vim-easymotion', {"on_map": ["<Plug>(easymotion-", "s"], "hook_add": "let g:EasyMotion_leader_key = 's'\nlet g:EasyMotion_use_upper = 1\nlet g:EasyMotion_smartcase = 1\nlet g:EasyMotion_use_smartsign_us = 1\n\" nmap sS <Plug>(easymotion-s2)\n\" nmap t <Plug>(easymotion-t2)\nnmap sl <Plug>(easymotion-sl)\n", "merged": 0})
call dein#add('beloglazov/vim-online-thesaurus', {"on_key": "OnlineThesaurusCurrentWord", "hook_add": "let g:online_thesaurus_map_keys = 0\n", "hook_post_source": "call AddCommand('OnlineThesaurusCurrentWord', 'OnlineThesaurusCurrentWord')\n", "merged": 0})
call dein#add('rhysd/vim-grammarous', {"on_cmd": "GrammarousCheck", "merged": 0})
call dein#add('kana/vim-operator-user', {"merged": 0})
call dein#add('kana/vim-operator-replace', {"on_map": "_", "depends": "vim-operator-user", "hook_source": "map _ <Plug>(operator-replace)\n", "merged": 0})
call dein#add('machakann/vim-sandwich', {"merged": 0})
call dein#add('tyru/operator-reverse.vim', {"hook_add": "map grt <Plug>(operator-reverse-text)\nmap grl <Plug>(operator-reverse-lines)\n", "merged": 0})
call dein#add('thinca/vim-quickrun', {"on_cmd": "QuickRun", "hook_add": "map <c-q> <Cmd>QuickRun<CR>\nlet g:quickrun_config = {\n  \\  'scss': {\n  \\    'type': executable('node-sass') ? 'scss/nodejs':\n  \\            executable('scss') ? 'scss/ruby': '',\n  \\  },\n  \\  'scss/nodejs': {\n  \\    'command': 'node-sass',\n  \\    'cmdopt': '--output-style expanded',\n  \\    'exec': ['%c %o %s'],\n  \\    'tempfile': '%{tempname()}.scss',\n  \\    'outputter/buffer/filetype': 'css',\n  \\  },\n  \\  'scss/ruby': {\n  \\    'command': 'scss',\n  \\    'cmdopt': '--style expanded',\n  \\    'exec': ['%c %o %s'],\n  \\    'tempfile': '%{tempname()}.scss',\n  \\    'outputter/buffer/filetype': 'css',\n  \\  },\n  \\  'sass': {\n  \\    'type': executable('node-sass') ? 'sass/nodejs':\n  \\            executable('sass') ? 'sass/ruby': '',\n  \\  },\n  \\  'sass/nodejs': {\n  \\    'command': 'node-sass',\n  \\    'cmdopt': '--indented-syntax --output-style expanded',\n  \\    'exec': ['%c %o %s'],\n  \\    'tempfile': '%{tempname()}.sass',\n  \\    'outputter/buffer/filetype': 'css',\n  \\  },\n  \\  'sass/ruby': {\n  \\    'command': 'sass',\n  \\    'cmdopt': '--style expanded',\n  \\    'exec': ['%c %o %s'],\n  \\    'tempfile': '%{tempname()}.sass',\n  \\    'outputter/buffer/filetype': 'css',\n  \\  },\n  \\  'scss2sass': {\n  \\    'command': 'sass-convert',\n  \\    'cmdopt': '-F scss -T sass',\n  \\    'exec': ['%c %o %s'],\n  \\    'outputter/buffer/filetype': 'sass',\n  \\  },\n  \\  'sass2scss': {\n  \\    'command': 'sass-convert',\n  \\    'cmdopt': '-F sass -T scss',\n  \\    'exec': ['%c %o %s'],\n  \\    'outputter/buffer/filetype': 'scss',\n  \\  },\n  \\  'javascript.jsx': {\n  \\    'type': 'javascript',\n  \\  },\n  \\}\n", "merged": 0})
call dein#add('rhysd/reply.vim', {"merged": 0})
call dein#add('metakirby5/codi.vim', {"on_cmd": "Codi", "merged": 0})
call dein#add('haya14busa/incsearch.vim', {"hook_add": "map /  <Plug>(incsearch-forward)\nmap ?  <Plug>(incsearch-backward)\nmap g/ <Plug>(incsearch-stay)\nset hlsearch\nlet g:incsearch#auto_nohlsearch = 1\nlet g:incsearch#highlight = {\n  \\   'on_cursor': {\n  \\     'priority': '100'\n  \\   },\n  \\   'cursor': {\n  \\     'group': 'ErrorMsg',\n  \\     'priority': '1000'\n  \\   }\n  \\ }\n", "merged": 0})
call dein#add('haya14busa/incsearch-fuzzy.vim', {"hook_add": "function! s:config_fuzzyall(...) abort\n  return extend(copy({\n  \\   'converters': [\n  \\     incsearch#config#fuzzy#converter(),\n  \\     incsearch#config#fuzzyspell#converter()\n  \\   ],\n  \\ }), get(a:, 1, {}))\nendfunction\nnoremap <silent><expr> z/ incsearch#go(<SID>config_fuzzyall())\nnoremap <silent><expr> z? incsearch#go(<SID>config_fuzzyall({'command': '?'}))\nnoremap <silent><expr> zg? incsearch#go(<SID>config_fuzzyall({'is_stay': 1}))\n", "merged": 0})
call dein#add('haya14busa/incsearch-easymotion.vim', {"hook_add": "function! s:config_easyfuzzymotion(...) abort\n  return extend(copy({\n    \\   'converters': [incsearch#config#fuzzy#converter()],\n    \\   'modules': [incsearch#config#easymotion#module()],\n    \\   'keymap': {\"\\<CR>\": '<Over>(easymotion)'},\n    \\   'is_expr': 0,\n    \\   'is_stay': 1\n    \\ }), get(a:, 1, {}))\nendfunction\nnoremap <silent><expr> s/ incsearch#go(<SID>config_easyfuzzymotion())\n", "merged": 0})
call dein#add('haya14busa/vim-asterisk', {"hook_add": "map *  <Plug>(asterisk-z*)\nmap #  <Plug>(asterisk-z#)\nmap g*  <Plug>(asterisk-g*)\nmap g#  <Plug>(asterisk-g#)\n", "merged": 0})
call dein#add('osyo-manga/vim-anzu', {"on_map": "<Plug>(anzu-", "hook_add": "nmap n <Plug>(anzu-n-with-echo)\nnmap N <Plug>(anzu-N-with-echo)\n", "merged": 0})
call dein#add('markonm/traces.vim', {"merged": 0})
call dein#add('brooth/far.vim', {"merged": 0})
call dein#add('honza/vim-snippets', {"merged": 0})
call dein#add('kana/vim-textobj-user', {"hook_post_source": "Include /plugins-conf/textobj-user", "merged": 0})
call dein#add('kana/vim-textobj-indent', {"merged": 0})
call dein#add('kana/vim-textobj-entire', {"merged": 0})
call dein#add('kana/vim-textobj-line', {"merged": 0})
call dein#add('rhysd/vim-textobj-continuous-line', {"merged": 0})
call dein#add('mattn/vim-textobj-url', {"merged": 0})
call dein#add('coderifous/textobj-word-column.vim', {"hook_add": "let g:skip_default_textobj_word_column_mappings = 1\nxnoremap <silent> a<space>w :<C-u>call TextObjWordBasedColumn(\"aw\")<cr>\nxnoremap <silent> a<space>W :<C-u>call TextObjWordBasedColumn(\"aW\")<cr>\nxnoremap <silent> i<space>w :<C-u>call TextObjWordBasedColumn(\"iw\")<cr>\nxnoremap <silent> i<space>W :<C-u>call TextObjWordBasedColumn(\"iW\")<cr>\nonoremap <silent> a<space>w :call TextObjWordBasedColumn(\"aw\")<cr>\nonoremap <silent> a<space>W :call TextObjWordBasedColumn(\"aW\")<cr>\nonoremap <silent> i<space>w :call TextObjWordBasedColumn(\"iw\")<cr>\nonoremap <silent> i<space>W :call TextObjWordBasedColumn(\"iW\")<cr>\n", "merged": 0})
call dein#add('thinca/vim-textobj-between', {"hook_add": "let g:textobj_between_no_default_key_mappings = 1\n", "hook_post_source": "xmap a<space>f <Plug>(textobj-between-a)\nxmap i<space>f <Plug>(textobj-between-i)\nomap a<space>f <Plug>(textobj-between-a)\nomap i<space>f <Plug>(textobj-between-i)\n", "merged": 0})
call dein#add('kana/vim-textobj-lastpat', {"merged": 0})
call dein#add('kana/vim-textobj-syntax', {"merged": 0})
call dein#add('kana/vim-textobj-fold', {"merged": 0})
call dein#add('kana/vim-textobj-datetime', {"merged": 0})
call dein#add('inside/vim-textobj-jsxattr', {"merged": 0})
call dein#add('terryma/vim-expand-region', {"hook_add": "let g:expand_region_text_objects = {\n  \\ 'i(': 1, 'a(': 1,\n  \\ 'i[': 1, 'a[': 1,\n  \\ 'i{': 1, 'a{': 1,\n  \\ 'i<': 1, 'a<': 1,\n  \\ \"i\\'\": 1, \"a\\'\": 1,\n  \\ 'i\"': 1, 'a\"': 1,\n  \\ 'it': 1, 'at': 1,\n  \\ 'iu': 0, 'au': 0,\n  \\ 'ic': 0, 'ac': 0,\n  \\ 'il': 0,\n  \\ 'ii': 0,\n  \\ 'i,': 0, 'a,': 0,\n  \\ 'ix': 0, 'ax': 0,\n  \\ 'ip': 0,\n  \\ 'ie': 0,\n  \\ }\nmap <CR> <Plug>(expand_region_expand)\nvmap <BS> <Plug>(expand_region_shrink)\n", "hook_post_source": "call expand_region#custom_text_objects('php', {\n  \\   'iP': 0, 'aP': 0,\n  \\ })\n", "merged": 0})
call dein#add('jaxbot/semantic-highlight.vim', {"on_cmd": "SemanticHighlightToggle", "hook_post_source": "call AddCommand('SemanticHighlightToggle', 'SemanticHighlightToggle')\n", "merged": 0})
call dein#add('tpope/vim-eunuch', {"on_cmd": ["Unlink", "Remove", "Move", "Rename", "Chmod", "Find", "Locate", "SudoWrite", "W"], "merged": 0})
call dein#add('lambdalisue/suda.vim', {"hook_add": "command! SudaRead  edit  suda://%\ncommand! SudaWrite write suda://%\n", "merged": 0})
call dein#add('vim-scripts/DrawIt', {"on_cmd": ["DIstart", "DIsngl", "DIdbl", "DIstop", "DrawIt"], "merged": 0})
call dein#add('gyim/vim-boxdraw', {"merged": 0})
call dein#add('vim-scripts/VisIncr', {"on_cmd": ["I", "II", "IB", "IIB", "IO", "IIO", "IX", "IIX", "IYMD", "IMDY", "IDMY", "IA", "ID", "IM", "IPOW", "IIPOW"], "merged": 0})
call dein#add('KabbAmine/vCoolor.vim', {"hook_add": "let g:vcoolor_disable_mappings = 1\nmap <Leader>vc <Cmd>VCoolor<CR>\n", "merged": 0})
call dein#add('januswel/sweepbuf.vim', {"on_cmd": "SweepBuffers", "merged": 0})
call dein#add('szw/vim-maximizer', {"on_cmd": "MaximizerToggle", "hook_add": "map <Leader>m <Cmd>MaximizerToggle<CR>\n", "merged": 0})
call dein#add('weirongxu/fixdir.vim', {"on_cmd": "FixDir", "merged": 0})
call dein#add('Shougo/vinarise.vim', {"on_cmd": ["Vinarise", "VinariseScript2Hex", "VinariseHex2Script", "VinarisePluginDump", "VinarisePluginViewBitmapView"], "merged": 0})
call dein#add('Shougo/vimshell.vim', {"on_cmd": ["VimShell", "VimShellCreate", "VimShellTab", "VimShellPop", "VimShellCurrentDir", "VimShellBufferDir", "VimShellExecute", "VimShellInteractive", "VimShellTerminal", "VimShellSendString", "VimShellSendBuffer"], "merged": 0})
call dein#add('diepm/vim-rest-console', {"on_ft": "rest", "hook_add": "function! OpenRest()\n  tabnew Rest\n  setf rest\n  setlocal bufhidden=hide\n  setlocal buftype=nofile\n  setlocal nobuflisted\n  if has('cursorbind')\n    setlocal nocursorbind\n  endif\n  setlocal noswapfile\n  setlocal nospell\n  setlocal noreadonly\n  nmap <buffer> <CR> <c-j>\n\n  call setline(1, [\n  \\ 'http://localhost',\n  \\ 'Content-Type: application/json; charset=utf-8',\n  \\ 'POST /',\n  \\ '{',\n  \\ '  \"key\": \"value\"',\n  \\ '}',\n  \\])\nendfunction\ncommand! Rest call OpenRest()\n", "merged": 0})
call dein#add('AndrewRadev/bufferize.vim', {"merged": 0})
call dein#add('kristijanhusak/vim-carbon-now-sh', {"on_cmd": "CarbonNowSh", "merged": 0})
call dein#add('echuraev/translate-shell.vim', {"hook_add": "let g:trans_default_direction = ':zh-CN'\nlet g:trans_directions_list = [\n  \\['', 'zh-CN'],\n  \\['', 'ja'],\n  \\['', 'en'],\n  \\['', 'zh-TW'],\n  \\]\nmap <Leader>tr <Cmd>Trans<CR>\nmap <Leader>ts <Cmd>TransSelectDirection<CR>\nmap <Leader>ti <Cmd>TransInteractive<CR>\nmap <Leader>th <Cmd>TransOpenHistoryWindow<CR>\n", "merged": 0})
call dein#add('/home/raidou/.vim/plugins-local/translate-shell-speak', {"hook_add": "map <Leader>tp <Cmd>call translate_shell_speak#speak_cursor_work()<CR>\nvmap <Leader>tp <Cmd>call translate_shell_speak#speak_visual()<CR>\n", "merged": 0})
call dein#add('/home/raidou/.vim/plugins-local/convert-tmp', {"merged": 0})
call dein#add('/home/raidou/.vim/plugins-local/rand_password', {"hook_post_source": "command! RandomPasswordReg call setreg('\"', RandPasswordInput())\ncommand! RandomWordsPasswordReg call setreg('\"', RandPasswordInputOnlyWord())\ncall AddCommand('random.password2reg' , 'RandomPasswordReg')\ncall AddCommand('random.words-password2reg' , 'RandomWordsPasswordReg')\n", "merged": 0})
call dein#add('thinca/vim-partedit', {"merged": 0})
call dein#add('voldikss/vim-floaterm', {"hook_add": "nmap <Leader>f1 <Cmd>FloatermToggle --wintype=floating win-1<CR>\nnmap <Leader>f2 <Cmd>FloatermToggle --wintype=floating win-2<CR>\nnmap <Leader>f3 <Cmd>FloatermToggle --wintype=floating win-3<CR>\nnmap <Leader>f4 <Cmd>FloatermToggle --wintype=floating win-4<CR>\nnmap <Leader>f5 <Cmd>FloatermToggle --wintype=floating win-5<CR>\nnmap <Leader>f6 <Cmd>FloatermToggle --wintype=floating win-6<CR>\nnmap <Leader>f7 <Cmd>FloatermToggle --wintype=floating win-7<CR>\nnmap <Leader>f8 <Cmd>FloatermToggle --wintype=floating win-8<CR>\nnmap <Leader>f9 <Cmd>FloatermToggle --wintype=floating win-9<CR>\nnmap <Leader>ft <Cmd>FloatermNew --wintype=floating<CR>\n", "merged": 0})
call dein#add('ryanoasis/vim-devicons', {"merged": 0})
call dein#add('lambdalisue/nerdfont.vim', {"merged": 0})
call dein#add('lambdalisue/glyph-palette.vim', {"hook_post_source": "augroup my-glyph-palette\n  autocmd! *\n  autocmd FileType fern,nerdtree,startify call glyph_palette#apply()\naugroup END\n", "merged": 0})
call dein#add('kyazdani42/nvim-web-devicons', {"if": "g:env#nvim", "hook_post_source": "lua<<EOF\nlocal devicons = require('nvim-web-devicons')\nlocal override = {\n  [\"spec.js\"] = {\n    icon = \"\uf499\",\n    color = \"#ffc600\",\n    name = \"TsTest\",\n  },\n  [\"spec.ts\"] = {\n    icon = \"\uf499\",\n    color = \"#ffc600\",\n    name = \"TsTest\",\n  },\n}\ndevicons.setup {\n  override = override,\n  default = true,\n}\nEOF\n", "merged": 0})
call dein#add('liuchengxu/eleline.vim', {"merged": 0})
call dein#add('Yggdroot/indentLine', {"hook_add": "let g:indentLine_fileTypeExclude = [\n  \\  '',\n  \\  'defx',\n  \\  'coc-explorer',\n  \\  'json',\n  \\  'vimfiler',\n  \\  'unite',\n  \\  'tagbar',\n  \\  'gina-status',\n  \\  'gina-grep',\n  \\  'gina-branch',\n  \\  'gina-log',\n  \\]\nlet g:indentLine_concealcursor = ''\nlet g:indentLine_conceallevel = 1\nlet g:indentLine_faster = 1\nif !g:env#x\n  let g:indentLine_color_term = 8\nendif\n", "merged": 0})
call dein#add('drmikehenry/vim-fontsize', {"on_map": "<Plug>Fontsize", "gui": 1, "hook_add": "nmap <silent> <C-ScrollWheelUp>   <Plug>FontsizeInc\nnmap <silent> <C-ScrollWheelDown> <Plug>FontsizeDec\n", "hook_post_source": "call AddCommand('fontsize.FontsizeBegin', '<Plug>FontsizeBegin')\ncall AddCommand('fontsize.FontsizeInc', '<Plug>FontsizeInc')\ncall AddCommand('fontsize.FontsizeDec', '<Plug>FontsizeDec')\ncall AddCommand('fontsize.FontsizeDefault', '<Plug>FontsizeDefault')\n", "merged": 0})
call dein#add('jszakmeister/vim-togglecursor', {"if": "! g:env#gui", "merged": 0})
call dein#add('equalsraf/neovim-gui-shim', {"if": "g:env#nvim", "merged": 0})
call dein#add('simeji/winresizer', {"hook_add": "let g:winresizer_start_key = '<C-w><Space>'\n", "merged": 0})
call dein#add('mbbill/undotree', {"on_cmd": ["UndotreeToggle", "UndotreeFocus", "UndotreeShow", "UndotreeHide"], "hook_add": "command! Undotree UndotreeToggle", "merged": 0})
call dein#add('Shougo/denite.nvim', {"hook_post_source": "autocmd FileType denite-filter call s:denite_filter_my_settings()\nfunction! s:denite_filter_my_settings() abort\n  inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')\n  nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')\nendfunction\n\nautocmd FileType denite call s:denite_my_settings()\nfunction! s:denite_my_settings() abort\n  nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')\n  nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')\n  nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')\n  nnoremap <silent><buffer><expr> q denite#do_map('quit')\n  nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')\n  nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select')\n  nnoremap <silent><buffer><expr> <C-j> denite#do_map('toggle_select').'j'\n  nnoremap <silent><buffer><expr> <C-k> denite#do_map('toggle_select').'k'\n  nnoremap <silent><buffer><expr> t denite#do_map('do_action', 'tabopen')\n  nnoremap <silent><buffer><expr> s denite#do_map('do_action', 'split')\n  nnoremap <silent><buffer><expr> v denite#do_map('do_action', 'vsplit')\nendfunction\n", "merged": 0})
call dein#add('tyru/open-browser.vim', {"merged": 0})
call dein#add('mattn/webapi-vim', {"merged": 0})
call dein#add('lambdalisue/gina.vim', {"if": "g:env#async", "hook_add": "cabbr git Gina\nmap <Leader>gs <Cmd>Gina status --opener=split<CR>\nmap <Leader>gc <Cmd>Gina commit --opener=split<CR>\nmap <Leader>gC <Cmd>Gina commit --amend --opener=split<CR>\nmap <Leader>gp <Cmd>Gina push<CR>\nnoremap <Leader>grb<space> :Gina rebase \nmap <Leader>grbc <Cmd>Gina rebase --continue<CR>\nmap <Leader>grbs <Cmd>Gina rebase --skip<CR>\nmap <Leader>gl <Cmd>Gina pull --rebase<CR>\nmap <Leader>gL <Cmd>Gina pull<CR>\nmap <Leader>gh <Cmd>Gina log<CR>\n", "hook_post_source": "function! s:gina_change()\n  if exists('#User#CocGitStatusChange')\n    doautocmd <nomodeline> User CocGitStatusChange\n  endif\nendfunction\ncall gina#core#emitter#subscribe('modified', function('s:gina_change'))\ncall extend(g:gina#command#browse#translation_patterns, {\n  \\ 'coding.net': [\n  \\   [\n  \\     '\\vhttps?://git\\.coding\\.net/(.{-})/(.{-})%(\\.git)?$',\n  \\     '\\vgit://git\\.coding\\.net\\/(.{-})\\/(.{-})%(\\.git)?$',\n  \\     '\\vgit\\@git\\.coding\\.net:(.{-})\\/(.{-})%(\\.git)?$',\n  \\     '\\vssh:\\/\\/git\\@git\\.coding\\.net\\/(.{-})\\/(.{-})%(\\.git)?$',\n  \\   ], {\n  \\     '_': 'https://coding.net/u/\\1/p/\\2/git/blob/%r0/%pt%{#L|}ls%{-L|}le',\n  \\     'root': 'https://coding.net/u/\\1/p/\\2/git/tree/%r0/',\n  \\     'blame': 'https://coding.net/u/\\1/p/\\2/git/blame/%r0/%pt%{#L|}ls%{-L|}le',\n  \\     'compare': 'https://coding.net/u/\\1/p/\\2/git/compare/%c1...%c2',\n  \\   },\n  \\ ],\n  \\})\n", "merged": 0})
call dein#add('cohama/agit.vim', {"on_cmd": ["Agit", "AgitFile", "AgitGit"], "merged": 0})
call dein#add('jaxbot/github-issues.vim', {"on_cmd": ["Gissues", "Giadd", "Giedit", "Giupdate", "Gmiles"], "hook_add": "if filereadable(g:github_token_file)\n  let g:github_access_token = strpart(join(readfile(g:github_token_file), \"\"), 6)\nendif\n", "merged": 0})
call dein#add('roxma/vim-tmux-clipboard', {"merged": 0})
call dein#add('haya14busa/vim-operator-flashy', {"if": "g:env#x", "on_map": "<Plug>(operator-flashy)", "depends": "vim-operator-user", "hook_add": "map y <Plug>(operator-flashy)\nnmap Y <Plug>(operator-flashy)$\n", "merged": 0})
call dein#add('MaxMEllon/vim-shiny', {"hook_add": "nmap p  <Plug>(shiny-p)\nnmap P  <Plug>(shiny-P)\nnmap gp <Plug>(shiny-gp)\nnmap gP <Plug>(shiny-gP)\n", "merged": 0})
call dein#add('ojroques/vim-oscyank', {"hook_add": "autocmd TextYankPost *\n  \\ if v:event.operator is 'y' && v:event.regname is '+'\n  \\| OSCYankReg +\n  \\| endif\n", "merged": 0})
call dein#add('vim-scripts/autohotkey-ahk', {"on_ft": "autohotkey", "merged": 0})
call dein#add('justinmk/vim-syntax-extra', {"on_ft": ["c", "cpp", "lex", "yacc"], "merged": 0})
call dein#add('nacitar/a.vim', {"on_ft": ["c", "cpp", "lex", "yacc"], "merged": 0})
call dein#add('rhysd/vim-crystal', {"on_ft": "crystal", "merged": 0})
call dein#add('elixir-editors/vim-elixir', {"on_ft": "elixir", "merged": 0})
call dein#add('gabesoft/vim-java', {"on_ft": "java", "merged": 0})
call dein#add('udalov/kotlin-vim', {"merged": 0})
call dein#add('kannokanno/previm', {"on_ft": ["markdown", "rst"], "depends": "open-browser.vim", "merged": 0})
call dein#add('iamcco/markdown-preview.nvim', {"if": "executable('yarn')", "build": "cd app & yarn install", "hook_add": "let g:mkdp_auto_close = 0\n", "merged": 0})
call dein#add('lervag/vimtex', {"hook_add": "let g:tex_flavor = \"latex\"", "merged": 0})
call dein#add('jrestrepo/matlab', {"on_ft": "matlab", "merged": 0})
call dein#add('weirongxu/yiiprado.vim', {"on_ft": "yiiprado", "hook_add": "autocmd BufNewFile,BufRead *.tpl setfiletype yiiprado\n", "merged": 0})
call dein#add('stephpy/vim-phpdoc', {"on_ft": g:env#html_type_list, "hook_post_source": "nmap <buffer> <Leader>8 <Cmd>call PhpDocSingle()<CR>\nvmap <buffer> <Leader>8 <Cmd>call PhpDocRange()<CR>\n", "merged": 0})
call dein#add('/home/raidou/.vim/plugins-local/php-cs-fixer', {"hook_post_source": "call AddCommand('php-fixer', 'PhpFixer')\n", "merged": 0})
call dein#add('pantharshit00/vim-prisma', {"merged": 0})
call dein#add('weirongxu/plantuml-previewer.vim', {"hook_add": "let g:plantuml_previewer#save_format = 'svg'\nau FileType plantuml let g:plantuml_previewer#plantuml_jar_path = get(\n      \\  matchlist(system('cat `which plantuml` | grep plantuml.jar'), '\\v.*\\s[''\"]?(\\S+plantuml\\.jar).*'),\n      \\  1,\n      \\  0\n      \\)\n", "merged": 0})
call dein#add('aklt/plantuml-syntax', {"merged": 0})

call dein#add('vim-ruby/vim-ruby', {"merged": 0})
call dein#add('hallison/vim-rdoc', {"merged": 0})
call dein#add('dag/vim-fish', {"on_ft": "fish", "merged": 0})
call dein#add('slim-template/vim-slim', {"merged": 0})
call dein#add('junegunn/vader.vim', {"on_cmd": "Vader", "on_ft": "vader", "merged": 0})
call dein#add('thinca/vim-scall', {"merged": 0})
call dein#add('vim-jp/vital.vim', {"merged": 0})
call dein#add('vim-jp/vital-complete', {"merged": 0})
call dein#add('lambdalisue/vital-Whisky', {"merged": 0})
call dein#add('thinca/vim-themis', {"on_ft": ["vim", "vimspec"], "merged": 0})
call dein#add('lambdalisue/vim-backslash', {"on_ft": "vim", "merged": 0})
call dein#add('tweekmonster/helpful.vim', {"merged": 0})
call dein#add('tpope/vim-scriptease', {"merged": 0})
call dein#add('tweekmonster/exception.vim', {"hook_add": "command! ExceptionTrace call exception#trace()\n", "merged": 0})
call dein#add('tweekmonster/startuptime.vim', {"merged": 0})

call dein#add('cespare/vim-toml', {"merged": 0})
call dein#add('rust-lang/rust.vim', {"merged": 0})

call dein#add('jceb/vim-orgmode', {"merged": 0})
call dein#add('mattn/calendar-vim', {"hook_add": "let g:calendar_no_mappings = 1\n", "merged": 0})
call dein#add('hail2u/vim-css3-syntax', {"merged": 0})
call dein#add('weirongxu/html5.vim', {"merged": 0})
call dein#add('mattn/emmet-vim', {"on_map": ["<C-y>"], "on_ft": g:env#web_assets_type_list, "hook_add": "let g:user_emmet_settings = {\n\\  'javascript': {\n\\     'extends': 'jsx',\n\\  },\n\\  'typescript': {\n\\     'extends': 'jsx',\n\\  },\n\\  'typescriptreact': {\n\\     'extends': 'jsx',\n\\  },\n\\  'typescript.tsx': {\n\\     'extends': 'jsx',\n\\  },\n\\}\n", "merged": 0})
call dein#add('othree/javascript-libraries-syntax.vim', {"hook_add": "let g:used_javascript_libs = 'jquery,underscore,backbone,angularjs,angularui,angularuirouter,react,flux,requirejs,jasmine,chai,handlebars'\n", "merged": 0})
call dein#add('neoclide/vim-jsx-improve', {"merged": 0})
call dein#add('peitalin/vim-jsx-typescript', {"merged": 0})
call dein#add('weirongxu/vim-coffee-script', {"on_ft": ["coffee", "jade"], "merged": 0})
call dein#add('rhysd/vim-wasm', {"merged": 0})
call dein#add('posva/vim-vue', {"hook_add": "let g:vue_disable_pre_processors = 1\n", "merged": 0})
call dein#add('neoclide/jsonc.vim', {"merged": 0})
call dein#add('/home/raidou/.vim/plugins-local/npm.vim', {"merged": 0})
call dein#add('briancollins/vim-jst', {"merged": 0})
call dein#add('jparise/vim-graphql', {"merged": 0})
call dein#add('dart-lang/dart-vim-plugin', {"merged": 0})
call dein#add('reasonml-editor/vim-reason-plus', {"merged": 0})